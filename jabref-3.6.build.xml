<?xml version="1.0"?>
<!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Filename: build.xml
   Purpose:  Ant build file for Jabref.

             Ant-Download: http://jakarta.apache.org/ant
             Ant-Manual:   http://jakarta.apache.org/ant/manual/index.html

             Jabref homepage:       http://jabref.sourceforge.net
             Jabref@OpenHub:        https://www.openhub.net/p/jabref

             Further questions:
               help mailing list:   https://lists.sourceforge.net/lists/listinfo/jabref-users

   Precondition: 1. Ant should be installed.
                 2. JAVA_HOME environment variable contains the path to JDK1.6 or higher
                 3. ANT_HOME environment variable contains the path to ant's home directory

   Language: XML
   Compiler: Ant
   Authors:  Joerg K. Wegner, wegnerj@informatik.uni-tuebingen.de
             Morten O. Alver

   modified: see at git checkout and "gitk build.xml"

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<project name="JabRef" default="jars" basedir=".">

	<!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        PROPERTY SETUP
     +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

	<!-- some version information -->
	<property name="jabref.version" value="#version#" />
	<property name="jabref.version.full" value="#version#" /> <!-- a version number with 4 places. Required by launch4j. We use "101" instead of "1" as the old versions incremented that number -->
	<property name="jabref.year" value="2016" />
	<property name="jabref.placeholder.version" value="@version@" />
	<property name="jabref.placeholder.year" value="@year@" />
	<!-- used by replace task -->

	<!-- Set the properties for intermediate directory -->
	<property name="build.jar" value="JabRef-${jabref.version}.jar" />
	<property name="build.dir" value="buildant" />
	<property name="build.classes" value="${build.dir}/classes" />
	<property name="build.tmp" value="${build.dir}/tmp" />
	<property name="build.classes.osx" value="${build.dir}/classes/osx/macadapter" />
	<property name="build.lib" value="${build.dir}/lib" />
	<property name="build.win" value="${build.dir}/windows" />
	<property name="build.images" value="${build.dir}/images" />
	<property name="build.resource" value="${build.dir}/resource" />
	<property name="build.help" value="${build.dir}/help" />
	<property name="build.extensions" value="${build.dir}/extensions" />
	<property name="build.extension-javadocs" value="${build.extensions}/API" />
	<property name="build.extension-layout" value="${build.extensions}/layout" />
	<property name="build.openoffice.meta" value="${build.resource}/openoffice" />

	<!-- Set the properties for source directories -->
	<property name="resources.dir" value="src/main/resources" />
	<property name="plugin.dir" value="${resources.dir}/plugins/" />
	<property name="txt.dir" value="." />
	<property name="java.dir" value="src/main/java" />
    <property name="gen.dir" value="src/main/gen" />
    <property name="grammar.gen.dir" value="${gen.dir}/net/sf/jabref/logic/bst/" />
    <property name="antlr4.src.dir" value="${java.dir}/../antlr4/" />
    <property name="search.gen.dir" value="${gen.dir}/net/sf/jabref/search/" />
	<property name="osx.dir" value="${resources.dir}/osx" />
	<property name="win.installer.dir" value="${resources.dir}/windows/nsis" />
	<property name="resource.dir" value="${resources.dir}/resource" />
	<property name="images.dir" value="${resources.dir}/images" />
	<property name="help.dir" value="${resources.dir}/help" />
	<property name="extensions.dir" value="${resources.dir}/extensions" />
	<property name="layout.dir" value="${resources.dir}/resource/layout" />
	<property name="lib.dir" value="lib" />
	<property name="buildlib.dir" value="buildlib" />

	<property name="osxbin.dir" value="osx" />

	<!-- Load user dependent properties. Has to happen before setting the properties here -->
	<!-- For instance to redefine the NSIS-compiler write
		nsis.executable="d:\\prog\\dev\\NSIS\\makensis.exe"
	  -->
	<property file="user.properties" />

	<property name="nsis.executable" value="C:\Program files\NSIS\makensis.exe"/>
	<property name="nsis.executable.linux" value="makensis"/>
	<property name="launch4j.dir" location="/opt/launch4j" />

	<!-- win.installer can only be build under Windows if the nsis.executable is found -->
	<condition property="is.windows">
	  <and>
	    <isset property="nsis.executable" />
	    <os family="windows" />
	  </and>
	</condition>

    <!-- Done by MrDlib -->
	<fileset id="deletableMeta-InfFiles" dir="${build.tmp}/META-INF">
	        <exclude name="services/**/*" />
	</fileset>
    <!-- Done by MrDlib -->

	<!-- Build classpath -->
	<filelist id="jars" />
	<path id="classpath">
        <fileset dir="${lib.dir}">
                <include name="*.jar"/>
        </fileset>
		<pathelement path="${build.classes}" />
		<pathelement path="${build.dir}" />
		<pathelement path="${build.lib}" />
		<pathelement path="${gen.dir}" />
		<filelist refid="jars" />
	</path>

	<!-- Classpath for running the code generator -->
	<path id="codegenerator">
		<pathelement location="/usr/share/java/jpfcodegen.jar" />
		<pathelement location="/usr/share/java//jpf.jar" />
		<pathelement location="/usr/share/java/jpf-boot.jar" />
		<pathelement location="/usr/share/java/velocity.jar" />
		<pathelement location="/usr/share/java/commons-logging.jar" />
		<pathelement location="/usr/share/java/commons-collections.jar" />
		<pathelement location="/usr/share/java/commons-lang.jar" />
	</path>

	<target name="run" depends="build">
		<java classname="net.sf.jabref.JabRefMain" fork="true">
			<classpath refid="classpath" />
		</java>
	</target>

	<!-- Runs project -->
	<target name="runFromJar">
		<java dir="${build.lib}" classname="net.sf.jabref.JabRefMain" fork="true">
			<classpath>
				<pathelement location="${build.lib}/${build.jar}" />
			</classpath>
		</java>
	</target>

	<!-- Run the JPF Code Generator -->
	<target name="generate" unless="needsNoRegenerate">
		<java classname="net.sf.jabref.plugin.util.CodeGenerator" fork="true">
			<arg value="${plugin.dir}" />
			<classpath refid="codegenerator" />
		</java>
	</target>

    <path id="classpath.antlr3">
        <fileset dir="${lib.dir}">
                <include name="*.jar"/>
        </fileset>

        <fileset dir="/usr/share/java">
                <include name="antlr3.jar"/>
                <include name="antlr3-runtime.jar"/>
        </fileset>
        <!-- the ANTLR jar is in the lib directory, of course -->
    </path>

    <path id="classpath.antlr4">
        <fileset dir="${lib.dir}">
                <include name="*.jar"/>
        </fileset>

        <fileset dir="/usr/share/java">
                <include name="antlr4/antlr4.jar"/>
                <include name="antlr4/antlr4-runtime.jar"/>
        </fileset>
        <!-- the ANTLR jar is in the lib directory, of course -->
    </path>

    <path id="classpath.jaxb">
        <fileset dir="${lib.dir}">
                <include name="*.jar"/>
        </fileset>

        <fileset dir="/usr/lib/jvm/java/lib">
                <include name="tools.jar"/>
        </fileset>

        <fileset dir="/usr/share/java/">
                <include name="istack-commons-runtime.jar"/>
                <include name="istack-commons-tools.jar"/>
        </fileset>

        <fileset dir="/usr/share/java/glassfish-jaxb">
                <include name="jaxb-impl.jar"/>
                <include name="jaxb-xjc.jar"/>
        </fileset>
    </path>

    <target name="generate-antlr3" description="Generates BstLexer.java and BstParser.java from the Bst.g grammar file using antlr3.">
        <echo>Generates BstLexer.java and BstParser.java from the Bst.g grammar file using antlr3.</echo>
        <!--mkdir dir="${grammar.gen.dir}" /-->
        <java classname="org.antlr.Tool" fork="true" failonerror="true">
            <arg value="-verbose"/>
            <!--arg value="-make"/-->
	    <arg value="-fo"/>
            <arg path="${grammar.gen.dir}"/>
            <arg value="src/main/antlr3/net/sf/jabref/bst/Bst.g"/>
            <!--arg value="file('src/main/gen/net/sf/jabref/bst/')" /-->
            <!--arg value="antlrSource" /-->
           <classpath refid="classpath.antlr3" />
        </java>
    </target>

    <target name="generate-antlr4" description="Generates java files for Search.g antlr4.">
        <echo>Generates java files for Search.g antlr4.</echo>
        <!--mkdir dir="${search.gen.dir}" /-->
        <mkdir dir="${search.gen.dir}" />
        <java classname="org.antlr.v4.Tool" fork="true" failonerror="true" dir="${antlr4.src.dir}">
      	    <arg value="-o"/>
            <arg value="../gen"/>
            <arg value="-visitor"/>
            <arg value="-no-listener"/>
            <arg value="-package"/>
            <arg value="net.sf.jabref.search"/>
            <arg value="net/sf/jabref/search/Search.g4"/>
            <!--arg value="file('src/main/gen/net/sf/jabref/bst/')" /-->
            <!--arg value="antlrSource" /-->
           <classpath refid="classpath.antlr4" />
        </java>
    </target>

    <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask" >
       <classpath refid="classpath.jaxb" />
    </taskdef>

    <target name="generate-jaxb" depends="generate-jaxb-medline, generate-jaxb-bibtexml" />

    <target name="generate-jaxb-medline">
      <echo>Generates java files for medline.xsd xjc.</echo>
      <mkdir dir="src/main/gen/net/sf/jabref/logic/importer/fileformat/medline"/>
      <xjc destdir="${gen.dir}" package="net.sf.jabref.logic.importer.fileformat.medline" >
         <schema dir="src/main/resources/xjc/medline" includes="medline.xsd"/>
      </xjc>
      <java classname="com.sun.tools.internal.xjc.XJCFacade" fork="true" failonerror="true" dir=".">
            <arg value="-d" />
            <arg value="${gen.dir}" />
            <arg value="-p" />
            <arg value="net.sf.jabref.logic.importer.fileformat.medline"/>
            <arg path="src/main/resources/xjc/medline/medline.xsd" />
            <classpath refid="classpath.jaxb" />
      </java>
    </target>

    <target name="generate-jaxb-bibtexml">
      <echo>Generates java files for bibtexml.xsd xjc.</echo>
      <!--mkdir dir="src/main/gen/net/sf/jabref/logic/importer/fileformat/bibtexml"/-->
      <!--xjc destdir="${gen.dir}" package="net.sf.jabref.logic.importer.fileformat.bibtexml" >
         <schema dir="src/main/resources/xjc/bibtexml" includes="bibtexml.xsd"/>
      </xjc-->
      <java classname="com.sun.tools.internal.xjc.XJCFacade" fork="true" failonerror="true" dir=".">
            <arg value="-d" />
            <arg path="${gen.dir}" />
            <arg value="-p" />
            <arg value="net.sf.jabref.logic.importer.fileformat.bibtexml"/>
            <arg path="src/main/resources/xjc/bibtexml/bibtexml.xsd" />
            <classpath refid="classpath.jaxb" />
      </java>
    </target>

	<!-- Compiles project -->
	<target name="compile" depends="generate-antlr3, generate-antlr4, generate-jaxb">
		<mkdir dir="${build.classes}" />
		<javac destdir="${build.classes}" encoding="UTF8" source="1.8" target="1.8">
			<src path="${java.dir}" />
			<src path="${gen.dir}" />
			<classpath refid="classpath" />
		</javac>
	</target>

	<!-- Builds the OSXAdapter -->
	<target name="osx" depends="compile">
		<mkdir dir="${build.classes}" />
		<javac srcdir="${osx.dir}" destdir="${build.classes}" target="1.8">
			<!-- Hack to force visibility of com.apple.eawt in rt.jar in JDK7 & 8
				 https://bugs.openjdk.java.net/browse/JDK-8008714 -->
			<compilerarg value="-XDignore.symbol.file"/>			
		</javac>
	</target>
	
	<!-- Copies in the OSXAdapter class, which is compilable only on Mac
		 Development on other platforms should also be possible by using the 
       	 distributed stub of com.apple.eawt as described in 
         http://stackoverflow.com/questions/2151174/how-can-i-develop-apple-java-extensions-on-windows -->
	<target name="non_osx">
		<mkdir dir="${build.classes.osx}" />
		<copy file="${osxbin.dir}/MacAdapter.class" todir="${build.classes.osx}" />
	</target>

	<target name="jars" depends="build" description="Jars up project">
		<mkdir dir="${build.lib}" />

		<mkdir dir="${build.tmp}" />
		<jar destfile="${build.lib}/${build.jar}" >

			<fileset dir="${build.classes}" />
			<fileset dir="${build.tmp}" />
			<fileset dir="${build.dir}">
				<include name="images/**" />
				<!--include name="help/**" /-->
				<include name="resource/**" />
				<include name="l10n/**" />
				<include name="icons/**" />
				<include name="fonts/**" />
				<include name="journals/**" />
				<include name="protectedterms/**" />
			</fileset>

			<!-- Add Plugins -->
			<fileset dir="${resources.dir}">
				<include name="plugins/**" />
			</fileset>
			<fileset dir="${txt.dir}">
				<include name="gpl2.txt" />
				<include name="gpl3.txt" />
				<include name="lesser.txt" />
				<include name="jgoodies.txt" />
				<include name="README" />
			</fileset>
			<manifest>
				<attribute name="Main-Class" value="net.sf.jabref.JabRefMain" />
                <!--attribute name="Class-Path" value="." /-->
			</manifest>
		</jar>

	</target>

	<!-- updates version information with git information.
	     should be used in development builds only

	     Use "ant addgitinfo jars" to generate a jar with version information in the filename
	-->
	<target name="addgitinfo" description="Adds git version information in ${jabref.version} and ${build.jar}">
		<exec executable="git" searchpath="true" outputproperty="git.version" failifexecutionfails="true" errorproperty="">
			<arg value="log" />
			<arg value="-1" />
			<arg value="--pretty=format:%cd - %H" />
			<arg value="--date=iso" />
		</exec>
		<script language="javascript"><![CDATA[
			var gitVersion = project.getProperty("git.version");
			if ((gitVersion != undefined) && (gitVersion.length() > 0)) {
				// convert "2012-12-16 15:44:07 +0100 - a249a226" to "2012-12-16 15.44.07 - a249a226"
				gitVersion = gitVersion.substr(0,13) + "." + gitVersion.substr(14,2) + "." + gitVersion.substr(17, 2) + gitVersion.substr(25);

				// we have to update the properties using JavaScript as properties are normally immutable
				// Properties can be updated using JavaScript and not with the <property>-Task
				var jabrefVersion = project.getProperty("jabref.version");
				jabrefVersion = jabrefVersion + " - " + gitVersion;
				project.setProperty("jabref.version", jabrefVersion);
				project.setProperty("build.jar", "JabRef-" + jabrefVersion + ".jar");
			}
		]]></script>
	</target>

	<!-- copy all necessary files and insert version informations -->
	<target name="build" depends="compile, buildinfos" description="Build project">

		<mkdir dir="${build.resource}" />

		<copy todir="${build.resource}">
			<fileset dir="${resource.dir}">
				<include name="**" />
			</fileset>
		</copy>
		<mkdir dir="${build.images}" />
		<copy todir="${build.images}">
			<fileset dir="${images.dir}">
				<include name="**" />
			</fileset>
		</copy>

		<mkdir dir="${build.dir}/l10n" />
		<copy todir="${build.dir}/l10n">
			<fileset dir="${resources.dir}/l10n" />
		</copy>

		<mkdir dir="${build.dir}/icons" />
		<copy todir="${build.dir}/icons">
			<fileset dir="${resources.dir}/icons" />
		</copy>

		<mkdir dir="${build.dir}/fonts" />
		<copy todir="${build.dir}/fonts">
			<fileset dir="${resources.dir}/fonts" />
		</copy>

		<mkdir dir="${build.dir}/journals" />
		<copy todir="${build.dir}/journals">
			<fileset dir="${resources.dir}/journals" />
		</copy>

		<mkdir dir="${build.dir}/protectedterms" />
		<copy todir="${build.dir}/protectedterms">
			<fileset dir="${resources.dir}/protectedterms" />
		</copy>

		<copy todir="${build.dir}">
			<fileset file="${resources.dir}/build.properties" />
		</copy>

		<!--mkdir dir="${build.help}" />
		<copy todir="${build.help}">
			<fileset dir="${help.dir}" />
		</copy-->

		<!-- Insert version informations -->
		<!--replace dir="${build.help}">
		    <replacefilter
			    token="${jabref.placeholder.version}"
				value="${jabref.version}" />
		    <replacefilter
			    token="${jabref.placeholder.year}"
				value="${jabref.year}" />
			<include name="**/About.html" />
		</replace-->
		<replace dir="${build.openoffice.meta}" token="${jabref.placeholder.version}" value="${jabref.version}">
			<include name="meta.xml" />
		</replace>

	</target>

	<!-- generate and save some build infos !!! necessary for dynamic build infos !!! -->
	<!-- todo : replace it by the replace task :-),
          src/resource/build.properties = template
          build/resource/build.properties = real info file
	-->
	<target name="buildinfos">
		<tstamp />
		<!-- get date -->
		<buildnumber />
		<!-- generate new build number -> build.number -->
		<echo message="build number = ${build.number}" />
		<!-- write the file, please do not edit this lines -->
<loadfile property="authors" srcFile="AUTHORS"> 
  <filterchain>
    <filterreader classname="org.apache.tools.ant.filters.StripLineComments">
        <param type="comment" value="#"/>
    </filterreader>
    <filterreader classname="org.apache.tools.ant.filters.StripLineBreaks">
        <param type="comment" value="#"/>
    </filterreader>

<tokenfilter>
    <replaceregex pattern="\n" replace="," flags="gi"/>
</tokenfilter>
  </filterchain>
</loadfile>
<loadfile property="developers" srcFile="DEVELOPERS"> 
  <filterchain>	
    <filterreader classname="org.apache.tools.ant.filters.StripLineComments">
        <param type="comment" value="#"/>
    </filterreader>
<tokenfilter>
    <stringtokenizer/>
    <replaceregex pattern="\\n" replace="\, "/>
</tokenfilter>
    <filterreader classname="org.apache.tools.ant.filters.StripLineBreaks">
        <param type="comment" value="#"/>
    </filterreader>

  </filterchain>
</loadfile>



		<echo file="${resource.dir}/build.properties">builddate=${TODAY}
build=${build.number}
version=${jabref.version}
authors=${authors}
developers=${developers}</echo>
	</target>

	<target name="extension-javadocs" depends="build" description="Generates the javadocs for the extensions archive">
		<mkdir dir="${build.extension-javadocs}" />
		<copy todir="${build.extension-javadocs}">
			<fileset dir="${help.dir}" defaultexcludes="yes">
				<include name="CustomExports.html" />
				<include name="CustomImports.html" />
			</fileset>
		</copy>

		<javadoc sourcepath="${java.dir}" destdir="${build.extension-javadocs}" author="true" version="true" windowtitle="JabRef-Extensions API" link="http://docs.oracle.com/javase/6/docs/api/" Overview="${extensions.dir}/API/overview.html" access="protected" encoding="ISO-8859-1" docencoding="UTF-8">
			<!--
                 create javadoc only selectively for classes that
                 users extending JabRef are likely to use
              -->
			<fileset dir="${java.dir}" defaultexcludes="yes">
				<include name="net/sf/jabref/imports/ImportFormat.java" />
				<include name="net/sf/jabref/imports/ImportFormatReader.java" />
				<include name="net/sf/jabref/BibtexEntry.java" />
				<include name="net/sf/jabref/BibtexEntryType.java" />
				<include name="net/sf/jabref/AuthorList.java" />
				<include name="net/sf/jabref/AuthorList.java" />
				<include name="net/sf/jabref/export/layout/LayoutFormatter.java" />
			</fileset>

			<classpath refid="classpath" />
		</javadoc>
	</target>

	<target name="extensions" depends="extension-javadocs" description="Generates the extensions archive">
		<copy todir="${build.extensions}" description="copy examples">
			<fileset dir="${java.dir}">
				<include name="net/sf/jabref/export/layout/format/CurrentDate.java" />
				<include name="net/sf/jabref/export/layout/format/ToLowerCase.java" />
				<include name="net/sf/jabref/export/layout/format/HTMLChars.java" />
				<include name="net/sf/jabref/imports/*Importer.java" />
			</fileset>
		</copy>
		<mkdir dir="${build.extension-layout}" />
		<copy todir="${build.extension-layout}">
			<fileset dir="${layout.dir}" />
		</copy>
		<copy todir="${build.extensions}">
			<fileset dir="${extensions.dir}" />
			<filterset>
				<filter token="version" value="${jabref.version}" />
			</filterset>
		</copy>
		<zip destfile="${build.dir}/jabref-extensions.zip" description="create extensions-zip file">
			<zipfileset dir="${build.extensions}" prefix="jabref-extensions" />
		</zip>
	</target>

	<target name="clean" depends="win.installer.clean" description="Clean project">
		<delete dir="${build.dir}" />
	</target>

	<target name="unjarlib" description="Unpacks jars from lib directory into temp directory">
		<mkdir dir="${build.tmp}" />
		<unjar dest="${build.tmp}">
			<filelist refid="jars" />
		</unjar>
		<!-- done by MrDlib -->
		<delete includeEmptyDirs="true">
			<fileset refid="deletableMeta-InfFiles" />
		</delete>
		<!-- done by MrDlib -->
		<!-- rename the microba license file -->
		<move file="${build.tmp}/license.txt" tofile="${build.tmp}/microba-license.txt" />
	</target>

	<target name="java16test">
		<condition property="java16">
			<equals arg1="${ant.java.version}" arg2="1.6"/>
		</condition>
	</target>

	<target name="macbundle" depends="java16test, jars" unless="java16" description="creates a bundle made for the Oracle Apple JVM (1.7+)">
		<taskdef
			name="bundleapp"
			classname="com.oracle.appbundler.AppBundlerTask"
			classpath="${buildlib.dir}/appbundler-1.0.jar" />
		<bundleapp
			name="JabRef"
			mainclassname="net.sf.jabref.JabRef"
			outputdirectory="${build.lib}"
			displayname="JabRef"
			identifier="jabref.JabRef"
			icon="${images.dir}/JabRef-Logo.icns"
			shortversion="${jabref.version}">
			<classpath file="${build.lib}/JabRef-${jabref.version}.jar" />	
			<!-- Memory options apparently break the bundle 
			<option value="-Xms128m -Xmx512m" /> -->
		</bundleapp>
		<!-- We still need to hack the Info.plist to enable high resolution for Retina displays -->
		<replace file="${build.lib}/JabRef.app/Contents/Info.plist" 
			token="&lt;key&gt;JVMOptions&lt;/key&gt;"
			value="&lt;key&gt;NSHighResolutionCapable&lt;/key&gt;&#10;
	&lt;true/&gt;&#10;&lt;key&gt;JVMOptions&lt;/key&gt;"/>
		<!-- We also need to add native support for bib files in the Info.plist -->
		<replace file="${build.lib}/JabRef.app/Contents/Info.plist" 
		token="&lt;key&gt;JVMOptions&lt;/key&gt;"
		value="&lt;key&gt;CFBundleDocumentTypes&lt;/key&gt;&#10;
	&lt;array&gt;&#10;
		&lt;dict&gt;&#10;
			&lt;key&gt;CFBundleTypeName&lt;/key&gt;&#10;
			&lt;string&gt;BibTeX file&lt;/string&gt;&#10;
			&lt;key&gt;CFBundleTypeRole&lt;/key&gt;&#10;
			&lt;string&gt;Editor&lt;/string&gt;&#10;
			&lt;key&gt;CFBundleTypeIconFile&lt;/key&gt;&#10;
			&lt;string&gt;JabRef-Logo.icns&lt;/string&gt;&#10;
			&lt;key&gt;CFBundleTypeExtensions&lt;/key&gt;&#10;
			&lt;array&gt;&#10;
				&lt;string&gt;bib&lt;/string&gt;&#10;
			&lt;/array&gt;&#10;
		&lt;/dict&gt;&#10;
	&lt;/array&gt;&#10;
	&lt;key&gt;JVMOptions&lt;/key&gt;"/>
		<zip basedir="${build.lib}"
			destfile="${build.lib}/JabRef-${jabref.version}-OSX.zip"
			excludes="JabRef.app/Contents/MacOS/JavaAppLauncher"
			includes="JabRef.app/"
			level="9">
			<zipfileset dir="${build.lib}" includes="JabRef.app/Contents/MacOS/JavaAppLauncher" filemode="755" />
		</zip>
	</target>
	
	<target name="macbundle_java16" depends="jars" description="creates a bundle made for the Legacy Apple JVM (1.6)">
		<jarbundler dir="${build.lib}"
                    name="JabRef_Java6"
                    mainclass="net.sf.jabref.JabRef"
                    jar="${build.lib}/${build.jar}"
                    icon="${images.dir}/JabRef-Logo.icns"
                    version="${jabref.version}"
                    jvmversion="1.6+"
		    vmoptions="-Xms128m -Xmx512m"
                    stubfile="${osxbin.dir}/JavaApplicationStub"
                    signature="JABr">
            <documenttype name="BibTeX file" extensions="bib" role="Editor"
                          iconFile="${images.dir}/JabRef-Logo.icns"/>
        </jarbundler>
        <!-- After running jarbundler we need to hack the Info.plist file: -->
        <replace file="${build.lib}/JabRef_Java6.app/Contents/Info.plist" token="&lt;key&gt;CFBundleDocumentTypes&lt;/key&gt;"
            value="&lt;key&gt;NSPrincipalClass&lt;/key&gt;${line.separator}
   &lt;string&gt;NSApplication&lt;/string&gt;${line.separator}
   &lt;key&gt;CFBundleDocumentTypes&lt;/key&gt;"/>
		<zip basedir="${build.lib}"
			destfile="${build.lib}/JabRef-${jabref.version}-OSX-Java6.zip"
			excludes="JabRef_Java6.app/Contents/MacOS/JavaApplicationStub"
			includes="JabRef_Java6.app/"
			level="9">
			<zipfileset dir="${build.lib}" includes="JabRef_Java6.app/Contents/MacOS/JavaApplicationStub" filemode="755" />
		</zip>
	</target>


	<!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
	<!-- Build Windows Installer                                                    -->
	<!--                                                                            -->
	<!-- Don't forget to set nsis.executable and launch4j.dir properties            -->
	<!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

	<target name="win.installer.clean" description="Delete Installer and Exe-Wrapper + Temp-files">
		<delete failonerror="false" dir="${win.installer.dir}/dist" />
		<delete file="${win.installer.dir}/JabRefSetup.exe" />
	</target>

	<target name="win.installer.win.pre" description="Precondition for win.installer on Windows">
		<fail unless="is.windows" message="Not running on windows or NSIS not found. Please make sure that user.properties exists" />
	</target>

	<target name="win.installer.step1" description="Gather everything that will go into the installer in dist">
		<mkdir dir="${win.installer.dir}/dist" />

		<copy file="${build.lib}/${build.jar}" todir="${win.installer.dir}/dist" />

		<available property="win.installer.jar.available" file="${win.installer.dir}/dist/${build.jar}" />

		<fail unless="win.installer.jar.available" message="Did not find jar: ${build.jar}" />

		<copy todir="${win.installer.dir}/dist">
			<fileset dir="${txt.dir}">
				<include name="gpl2.txt" />
				<include name="gpl3.txt" />
				<include name="lesser.txt" />
				<include name="README" />
			</fileset>
		</copy>

		<!-- "Create Exe-Wrapper" -->

		<!-- first of all, update version information -->
		<script language="javascript"><![CDATA[
			// create new property with a maximum length of 50 characters
			var txtFileVersion = project.getProperty("jabref.version");
			if (txtFileVersion.length()>50) {
				txtFileVersion = txtFileVersion.substring(0,50);
			}
			project.setProperty("txtFileVersion", txtFileVersion);
		]]></script>
		<delete file="jabref-launch4j.tmp" />
		<copy file="jabref-launch4j.xml" tofile="jabref-launch4j.tmp" />
		<replace file="jabref-launch4j.tmp">
			<replacefilter token="1.1.1" value="${jabref.version}" />
			<replacefilter token="3.3.3" value="${txtFileVersion}" />
			<replacefilter token="2.2.2.2" value="${jabref.version.full}" />
			<replacefilter token="./" value="${basedir}/" />
		</replace>

	</target>

	<target name="win.installer.step2.linux" description="Create Windows launcher and Windows installer on Linux">
		<!-- launch4j ant task does not work as ld.exe gets the wrong path passed - see https://sourceforge.net/tracker/?func=detail&aid=3598164&group_id=95944&atid=613100 -->
		<exec
			executable="${launch4j.dir}/launch4j"
			dir="${launch4j.dir}">
			<arg value="${basedir}/jabref-launch4j.tmp"/>
		</exec>

		<!-- Finally create Windows-Installer -->
		<exec dir="." executable="${nsis.executable.linux}" failonerror="true">
			<arg line="'-DVERSION=${jabref.version}' ${win.installer.dir}/setup.nsi" />
		</exec>
	</target>

	<target name="win.installer.step2.win" description="Create Windows launcher and Windows installer on Windows">
		<!-- launch4j ant task does not work as ld.exe gets the wrong path passed - see https://sourceforge.net/tracker/?func=detail&aid=3598164&group_id=95944&atid=613100 -->
		<exec
			executable="${launch4j.dir}/launch4jc.exe"
			dir="${launch4j.dir}">
			<arg value="${basedir}/jabref-launch4j.tmp"/>
		</exec>

		<exec dir="." executable="${nsis.executable}" failonerror="true">
			<arg line="'/DVERSION=${jabref.version}' ${win.installer.dir}/setup.nsi" />
		</exec>
	</target>

	<target name="win.installer.step3">
		<move file="${win.installer.dir}/JabRefSetup.exe" tofile="${build.lib}/JabRef-${jabref.version}-setup.exe" />
		<delete dir="${win.installer.dir}/dist" />
	</target>

	<target name="win.installer" description="Copy files in place to be used by the installer" depends="win.installer.win.pre, jars, win.installer.step1, win.installer.step2.win, win.installer.step3">
	</target>

	<target name="win.installer.linux" description="Copy files in place to be used by the installer" depends="jars, win.installer.step1, win.installer.step2.linux, win.installer.step3">
		<delete dir="${win.installer.dir}/dist" />

	</target>

	<!--+++++++++++++++++++++++++++++++++++++++++++++++++
	   Auxiliary targets
	  +++++++++++++++++++++++++++++++++++++++++++++++++-->

	<!--taskdef name="jarbundler" classpath="${buildlib.dir}/jarbundler-2.2.0.jar" classname="net.sourceforge.jarbundler.JarBundler" /-->

	<target name="zipsrc">
        <exec executable="git" searchpath="true" failifexecutionfails="true" outputproperty="devnull" errorproperty="devnull" output="${build.lib}/JabRef-${jabref.version}-src.zip">
            <arg value="-c" />
            <arg value="core.autocrlf=false" />
            <arg value="-c" />
            <arg value="core.eol=lf" />
            <arg value="archive" />
            <arg value="HEAD" />
            <arg value="--format=zip" />
        </exec>
	</target>

	<target name="targzsrc">
        <exec executable="git" searchpath="true" failifexecutionfails="true" outputproperty="devnull" errorproperty="devnull" output="${build.lib}/JabRef-${jabref.version}-src.tar.gz">
            <arg value="-c" />
            <arg value="core.autocrlf=false" />
            <arg value="-c" />
            <arg value="core.eol=lf" />
            <arg value="archive" />
            <arg value="HEAD" />
            <arg value="--format=zip" />
        </exec>
	</target>

	<target name="devsnapshot" depends="clean, addgitinfo, non_osx, win.installer, macbundle_java16, macbundle" description="creates development snapshot binaries" />

	<target name="release" depends="clean, non_osx, win.installer, macbundle_java16, macbundle, targzsrc, zipsrc" description="Do a release on Windows. Creates all distribution files in ${build.lib}"/>
	<target name="release.linux" depends="clean, non_osx, win.installer.linux, macbundle_java16, macbundle, targzsrc, zipsrc" description="Do a release on Linux. Creates all distribution files in ${build.lib}" />
</project>
