--- jabref-3.6/src/main/java/net/sf/jabref/logic/importer/fetcher/CrossRef.java.orig
+++ jabref-3.6/src/main/java/net/sf/jabref/logic/importer/fetcher/CrossRef.java
@@ -59,6 +59,8 @@
                 LOGGER.debug("DOI " + dataDOI + " for " + title.get() + " found.");
                 return DOI.build(dataDOI);
             }
+        } catch (JSONException e) {
+            LOGGER.error("JSONException: " + e.getMessage(), e);
         } catch (UnirestException e) {
             LOGGER.warn("Unable to query CrossRef API: " + e.getMessage(), e);
         }
--- jabref-3.6/src/main/java/net/sf/jabref/gui/importer/fetcher/DOAJFetcher.java.orig
+++ jabref-3.6/src/main/java/net/sf/jabref/gui/importer/fetcher/DOAJFetcher.java
@@ -19,6 +19,7 @@
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.json.JSONArray;
+import org.json.JSONException;
 import org.json.JSONObject;
 
 public class DOAJFetcher implements EntryFetcher {
@@ -99,6 +100,9 @@
                         Localization.lang("Search %0", "DOAJ"), JOptionPane.INFORMATION_MESSAGE);
                 return false;
             }
+        } catch (JSONException e) {
+            LOGGER.error("JSONException: " + e.getMessage(), e);
+            return false;
         } catch (UnirestException e) {
             LOGGER.warn("Problem searching DOAJ", e);
             status.setStatus(Localization.lang("%0 import canceled", "DOAJ"));
--- jabref-3.6/src/main/java/net/sf/jabref/logic/importer/util/JSONEntryParser.java.orig
+++ jabref-3.6/src/main/java/net/sf/jabref/logic/importer/util/JSONEntryParser.java
@@ -11,6 +11,7 @@
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.json.JSONArray;
+import org.json.JSONException;
 import org.json.JSONObject;
 
 public class JSONEntryParser {
@@ -37,6 +38,7 @@
 
         // Authors
         if (bibJsonEntry.has("author")) {
+          try {
             JSONArray authors = bibJsonEntry.getJSONArray("author");
             List<String> authorList = new ArrayList<>();
             for (int i = 0; i < authors.length(); i++) {
@@ -47,29 +49,41 @@
                 }
             }
             entry.setField(FieldName.AUTHOR, String.join(" and ", authorList));
+          } catch (JSONException e) {
+              LOGGER.error("JSONException: " + e.getMessage(), e);
+          }
         } else {
             LOGGER.info("No author found.");
         }
 
         // Direct accessible fields
         for (String field : singleFieldStrings) {
+          try {
             if (bibJsonEntry.has(field)) {
                 entry.setField(field, bibJsonEntry.getString(field));
             }
+          } catch (JSONException e) {
+           LOGGER.error("JSONException: " + e.getMessage(), e);
+          }
         }
 
         // Page numbers
         if (bibJsonEntry.has("start_page")) {
+          try {
             if (bibJsonEntry.has("end_page")) {
                 entry.setField(FieldName.PAGES,
                         bibJsonEntry.getString("start_page") + "--" + bibJsonEntry.getString("end_page"));
             } else {
                 entry.setField(FieldName.PAGES, bibJsonEntry.getString("start_page"));
             }
+          } catch (JSONException e) {
+              LOGGER.error("JSONException: " + e.getMessage(), e);
+          }
         }
 
         // Journal
         if (bibJsonEntry.has("journal")) {
+          try {
             JSONObject journal = bibJsonEntry.getJSONObject("journal");
             // Journal title
             if (journal.has("title")) {
@@ -83,12 +97,16 @@
                     entry.setField(field, journal.getString(field));
                 }
             }
+          } catch (JSONException e) {
+              LOGGER.error("JSONException: " + e.getMessage(), e);
+          }
         } else {
             LOGGER.info("No journal information found.");
         }
 
         // Keywords
         if (bibJsonEntry.has("keywords")) {
+          try {
             JSONArray keywords = bibJsonEntry.getJSONArray("keywords");
             LinkedHashSet<String> keywordList = new LinkedHashSet<>();
             for (int i = 0; i < keywords.length(); i++) {
@@ -97,10 +115,14 @@
                 }
             }
             entry.putKeywords(keywordList, keywordSeparator);
+          } catch (JSONException e) {
+              LOGGER.error("JSONException: " + e.getMessage(), e);
+          }
         }
 
         // Identifiers
         if (bibJsonEntry.has("identifier")) {
+          try {
             JSONArray identifiers = bibJsonEntry.getJSONArray("identifier");
             for (int i = 0; i < identifiers.length(); i++) {
                 String type = identifiers.getJSONObject(i).getString("type");
@@ -112,10 +134,14 @@
                     entry.setField(FieldName.ISSN, identifiers.getJSONObject(i).getString("id"));
                 }
             }
+          } catch (JSONException e) {
+              LOGGER.error("JSONException: " + e.getMessage(), e);
+          }
         }
 
         // Links
         if (bibJsonEntry.has("link")) {
+          try {
             JSONArray links = bibJsonEntry.getJSONArray("link");
             for (int i = 0; i < links.length(); i++) {
                 if (links.getJSONObject(i).has("type")) {
@@ -125,6 +151,9 @@
                     }
                 }
             }
+          } catch (JSONException e) {
+              LOGGER.error("JSONException: " + e.getMessage(), e);
+          }
         }
 
         return entry;
@@ -159,6 +188,7 @@
 
         // Authors
         if (springerJsonEntry.has("creators")) {
+          try {
             JSONArray authors = springerJsonEntry.getJSONArray("creators");
             List<String> authorList = new ArrayList<>();
             for (int i = 0; i < authors.length(); i++) {
@@ -169,21 +199,29 @@
                 }
             }
             entry.setField(FieldName.AUTHOR, String.join(" and ", authorList));
+          } catch (JSONException e) {
+              LOGGER.error("JSONException: " + e.getMessage(), e);
+          }
         } else {
             LOGGER.info("No author found.");
         }
 
         // Direct accessible fields
         for (String field : singleFieldStrings) {
+          try {
             if (springerJsonEntry.has(field)) {
                 String text = springerJsonEntry.getString(field);
                 if (!text.isEmpty()) {
                     entry.setField(field, text);
                 }
             }
+          } catch (JSONException e) {
+              LOGGER.error("JSONException: " + e.getMessage(), e);
+          }
         }
 
         // Page numbers
+      try {
         if (springerJsonEntry.has("startingPage") && !(springerJsonEntry.getString("startingPage").isEmpty())) {
             if (springerJsonEntry.has("endPage") && !(springerJsonEntry.getString("endPage").isEmpty())) {
                 entry.setField(FieldName.PAGES,
@@ -192,29 +230,44 @@
                 entry.setField(FieldName.PAGES, springerJsonEntry.getString("startingPage"));
             }
         }
+      } catch (JSONException e) {
+        LOGGER.error("JSONException: " + e.getMessage(), e);
+      }
 
         // Journal
+      try {
         if (springerJsonEntry.has("publicationName")) {
             entry.setField(nametype, springerJsonEntry.getString("publicationName"));
         }
+      } catch (JSONException e) {
+        LOGGER.error("JSONException: " + e.getMessage(), e);
+      }
 
         // URL
         if (springerJsonEntry.has("url")) {
+          try {
             JSONArray urlarray = springerJsonEntry.optJSONArray("url");
             if (urlarray == null) {
                 entry.setField(FieldName.URL, springerJsonEntry.optString("url"));
             } else {
                 entry.setField(FieldName.URL, urlarray.getJSONObject(0).optString("value"));
             }
+          } catch (JSONException e) {
+              LOGGER.error("JSONException: " + e.getMessage(), e);
+          }
         }
 
         // Date
         if (springerJsonEntry.has("publicationDate")) {
+          try {
             String date = springerJsonEntry.getString("publicationDate");
             entry.setField(FieldName.DATE, date); // For BibLatex
             String[] dateparts = date.split("-");
             entry.setField(FieldName.YEAR, dateparts[0]);
             entry.setField(FieldName.MONTH, MonthUtil.getMonthByNumber(Integer.parseInt(dateparts[1])).bibtexFormat);
+          } catch (JSONException e) {
+              LOGGER.error("JSONException: " + e.getMessage(), e);
+          }
         }
 
         // Clean up abstract (often starting with Abstract)
--- jabref-3.6/src/main/java/net/sf/jabref/gui/importer/fetcher/IEEEXploreFetcher.java.orig
+++ jabref-3.6/src/main/java/net/sf/jabref/gui/importer/fetcher/IEEEXploreFetcher.java
@@ -211,6 +211,7 @@
         bibtexQueryURLStringBuf.append(URL_BIBTEX_START);
 
         //loop over each record and create a comma-separate list of article numbers which will be used to download the raw Bibtex
+     try {
         JSONArray recordsJsonArray = searchResultsJson.getJSONArray("records");
         for (int n = 0; n < recordsJsonArray.length(); n++) {
             if (!recordsJsonArray.getJSONObject(n).isNull("articleNumber")) {
@@ -218,6 +219,9 @@
                         .append(',');
             }
         }
+      } catch (JSONException e) {
+	        LOGGER.error("JSONException: " + e.getMessage(), e);
+      }
         //delete the last comma
         bibtexQueryURLStringBuf.deleteCharAt(bibtexQueryURLStringBuf.length() - 1);
 
--- jabref-3.6/src/main/java/net/sf/jabref/gui/importer/fetcher/SpringerFetcher.java.orig
+++ jabref-3.6/src/main/java/net/sf/jabref/gui/importer/fetcher/SpringerFetcher.java
@@ -20,6 +20,7 @@
     import org.apache.commons.logging.Log;
     import org.apache.commons.logging.LogFactory;
     import org.json.JSONArray;
+    import org.json.JSONException;
     import org.json.JSONObject;
 
 public class SpringerFetcher implements EntryFetcher {
@@ -102,6 +103,8 @@
                         Localization.lang("Search %0", getTitle()), JOptionPane.INFORMATION_MESSAGE);
                 return false;
             }
+        } catch (JSONException e) {
+            LOGGER.error("JSONException: " + e.getMessage(), e);
         } catch (UnirestException e) {
             LOGGER.warn("Problem searching Springer", e);
         } catch (UnsupportedEncodingException e) {
--- jabref-3.6/src/main/java/net/sf/jabref/logic/importer/fetcher/SpringerLink.java.orig
+++ jabref-3.6/src/main/java/net/sf/jabref/logic/importer/fetcher/SpringerLink.java
@@ -16,6 +16,7 @@
 import com.mashape.unirest.http.exceptions.UnirestException;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import org.json.JSONException;
 import org.json.JSONObject;
 
 /**
@@ -53,6 +54,8 @@
                     LOGGER.info("Fulltext PDF found @ Springer.");
                     pdfLink = Optional.of(new URL("http", CONTENT_HOST, String.format("/content/pdf/%s.pdf", doi.get().getDOI())));
                 }
+            } catch (JSONException e) {
+                LOGGER.error("JSONException: " + e.getMessage(), e);
             } catch(UnirestException e) {
                 LOGGER.warn("SpringerLink API request failed", e);
             }
--- jabref-3.5/src/main/java/net/sf/jabref/logic/util/Version.java.orig
+++ jabref-3.5/src/main/java/net/sf/jabref/logic/util/Version.java
@@ -10,6 +10,7 @@
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import org.json.JSONException;
 import org.json.JSONObject;
 
 /**
@@ -56,8 +57,13 @@
         URLConnection connection = new URL(JABREF_GITHUB_URL).openConnection();
         connection.setRequestProperty("Accept-Charset", "UTF-8");
         BufferedReader rd = new BufferedReader(new InputStreamReader(connection.getInputStream()));
-        JSONObject obj = new JSONObject(rd.readLine());
-        return new Version(obj.getString("tag_name").replaceFirst("v", ""));
+        try {
+            JSONObject obj = new JSONObject(rd.readLine());
+            return new Version(obj.getString("tag_name").replaceFirst("v", ""));
+        } catch (JSONException e) {
+            LOGGER.error("JSONException: " + e.getMessage(), e);
+            return new Version(null);
+        }
     }
 
     /**
