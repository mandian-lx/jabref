--- jabref-2.10.orig/src/java/net/sf/jabref/JabRef.java
+++ jabref-2.10/src/java/net/sf/jabref/JabRef.java
@@ -649,24 +649,36 @@
     
     private void setLookAndFeel() {
         try {
-            String systemLnF;
-            // * Look first into the Preferences
-            // * Fallback to the System Look & Fell
+            String lookFeel;
+            String systemLnF = UIManager.getSystemLookAndFeelClassName();
+
             if (Globals.prefs.getBoolean("useDefaultLookAndFeel")) {
-                systemLnF = UIManager.getSystemLookAndFeelClassName();
+                // Use system Look & Feel by default
+            	lookFeel = systemLnF;
             } else {
-                systemLnF = Globals.prefs.get("lookAndFeel");
+                lookFeel = Globals.prefs.get("lookAndFeel");
             }
 
             // At all cost, avoid ending up with the Metal look and feel:
-            if (systemLnF.equals("javax.swing.plaf.metal.MetalLookAndFeel")) {
+            if (lookFeel.equals("javax.swing.plaf.metal.MetalLookAndFeel")) {
                 Plastic3DLookAndFeel lnf = new Plastic3DLookAndFeel();
                 Plastic3DLookAndFeel.setCurrentTheme(new SkyBluer());
                 com.jgoodies.looks.Options.setPopupDropShadowEnabled(true);
                 UIManager.setLookAndFeel(lnf);
             }
             else {
-                UIManager.setLookAndFeel(systemLnF);
+            	try {
+            		UIManager.setLookAndFeel(lookFeel);
+            	} catch(ClassNotFoundException e) {
+            		// specified look and feel does not exist on the classpath, so use system l&f
+            		UIManager.setLookAndFeel(systemLnF);
+            		// also set system l&f as default
+            		Globals.prefs.put("lookAndFeel", systemLnF);
+            		// notify the user
+            		JOptionPane.showMessageDialog(jrf, Globals.lang("Unable to find the requested Look & Feel and thus the default one is used."),
+                            Globals.lang("Warning"),
+                            JOptionPane.WARNING_MESSAGE);
+            	}
             }
         } catch (Exception e) {
             e.printStackTrace();
--- jabref-2.10.orig/src/java/net/sf/jabref/AdvancedTab.java
+++ jabref-2.10/src/java/net/sf/jabref/AdvancedTab.java
@@ -16,6 +16,8 @@
 package net.sf.jabref;
 
 import java.awt.BorderLayout;
+import java.util.ArrayList;
+import java.util.List;
 
 import javax.swing.*;
 import javax.swing.event.ChangeEvent;
@@ -40,7 +42,8 @@
     JLabel lab;
     JCheckBox useDefault, useRemoteServer, useNativeFileDialogOnMac, filechooserDisableRename,
             useIEEEAbrv, biblatexMode;
-    JTextField className, remoteServerPort;
+    JComboBox<String> className;
+    JTextField remoteServerPort;
     JButton def1 = new JButton(Globals.lang("Default")),
         def2 = new JButton(Globals.lang("Default"));
     JPanel p1 = new JPanel(),
@@ -69,8 +72,26 @@
     useIEEEAbrv = new JCheckBox(Globals.lang("Use IEEE LaTeX abbreviations"));
     biblatexMode = new JCheckBox(Globals.lang("BibLaTeX mode"));
     remoteServerPort = new JTextField();
-    className = new JTextField(50);
-    final JTextField clName = className;
+    String[] possibleLookAndFeels = {
+    	"com.jgoodies.looks.plastic.Plastic3DLookAndFeel",
+    	"com.sun.java.swing.plaf.windows.WindowsLookAndFeel",
+    	"com.sun.java.swing.plaf.motif.MotifLookAndFeel",
+    	"javax.swing.plaf.mac.MacLookAndFeel",
+    	"com.sun.java.swing.plaf.gtk.GTKLookAndFeel",
+    	"javax.swing.plaf.metal.MetalLookAndFeel"
+    };
+    // Only list L&F which are available
+    List<String> lookAndFeels = new ArrayList<String>();
+    for (String lf : possibleLookAndFeels) {
+    	try {
+    		// Try to find L&F, throws exception if not successful
+    		Class.forName(lf);
+    		lookAndFeels.add(lf);
+    	} catch(ClassNotFoundException e) {}
+    }
+    className = new JComboBox<String>(lookAndFeels.toArray(new String[lookAndFeels.size()]));
+    className.setEditable(true);
+    final JComboBox<String> clName = className;
     useDefault.addChangeListener(new ChangeListener() {
         public void stateChanged(ChangeEvent e) {
             clName.setEnabled(((JCheckBox)e.getSource()).isSelected());
@@ -173,7 +194,7 @@
         oldUseDef = _prefs.getBoolean("useDefaultLookAndFeel");
         oldLnf = _prefs.get("lookAndFeel");
         useDefault.setSelected(!oldUseDef);
-        className.setText(oldLnf);
+        className.setSelectedItem(oldLnf);
         className.setEnabled(!oldUseDef);
         useRemoteServer.setSelected(_prefs.getBoolean("useRemoteServer"));
         oldPort = _prefs.getInt("remoteServerPort");
@@ -193,7 +214,7 @@
 
     public void storeSettings() {
         _prefs.putBoolean("useDefaultLookAndFeel", !useDefault.isSelected());
-        _prefs.put("lookAndFeel", className.getText());
+        _prefs.put("lookAndFeel", className.getSelectedItem().toString());
         _prefs.putBoolean("useNativeFileDialogOnMac", useNativeFileDialogOnMac.isSelected());
         _prefs.putBoolean("filechooserDisableRename", filechooserDisableRename.isSelected());
         UIManager.put("FileChooser.readOnly", filechooserDisableRename.isSelected());
@@ -228,7 +249,7 @@
         _prefs.putBoolean("biblatexMode", biblatexMode.isSelected());
 
         if ((useDefault.isSelected() == oldUseDef) ||
-            !oldLnf.equals(className.getText())) {
+            !oldLnf.equals(className.getSelectedItem().toString())) {
             JOptionPane.showMessageDialog(null, 
             		Globals.lang("You have changed the look and feel setting.")
             		.concat(" ")
--- jabref-2.10.orig/src/java/net/sf/jabref/JabRefPreferences.java
+++ jabref-2.10/src/java/net/sf/jabref/JabRefPreferences.java
@@ -182,7 +182,7 @@
 			//defaults.put("pdfviewer", "evince");
 			//defaults.put("psviewer", "gv");
 			//defaults.put("htmlviewer", "firefox");
-			defaults.put("lookAndFeel", "com.jgoodies.plaf.plastic.Plastic3DLookAndFeel");
+			defaults.put("lookAndFeel", "com.jgoodies.looks.plastic.Plastic3DLookAndFeel");
             defaults.put("fontFamily", "SansSerif");
             
         	// linux
