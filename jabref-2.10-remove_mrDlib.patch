--- jabref-2.10/src/java/spl/gui/ImportDialog.java.remove_mrDlib
+++ jabref-2.10/src/java/spl/gui/ImportDialog.java
@@ -20,9 +20,9 @@
 	public final static int NOMETA = 0;
 	public final static int XMP = 1;
 	public final static int CONTENT = 2;
-	public final static int MRDLIB = 3;
+	//public final static int MRDLIB = 3;
 	public final static int ONLYATTACH = 4;
-	public final static int UPDATEEMPTYFIELDS = 5;
+	//public final static int UPDATEEMPTYFIELDS = 5;
 	
     private JPanel contentPane;
     private JLabel labelSubHeadline;
@@ -32,14 +32,14 @@
    	private JCheckBox useDefaultPDFImportStyle;
     private JRadioButton radioButtonXmp;
 	private JRadioButton radioButtonPDFcontent;
-    private JRadioButton radioButtonMrDlib;
+    //private JRadioButton radioButtonMrDlib;
     private JRadioButton radioButtonNoMeta;
     private JLabel labelHeadline;
     private JLabel labelFileName;
     private JRadioButton radioButtononlyAttachPDF;
-    private JRadioButton radioButtonUpdateEmptyFields;
-    private JLabel labelMrDlib1;
-    private JLabel labelMrDlib2;
+    //private JRadioButton radioButtonUpdateEmptyFields;
+    //private JLabel labelMrDlib1;
+    //private JLabel labelMrDlib2;
     private int result;
     private String fileName;
     // indicates whether the drop target is a row in the table or whether other kinds of imports are used
@@ -72,15 +72,15 @@
         radioButtonNoMeta = new JRadioButton(Globals.lang("Create_blank_entry_linking_the_PDF"));
         radioButtonXmp = new JRadioButton(Globals.lang("Create_entry_based_on_XMP_data"));
         radioButtonPDFcontent = new JRadioButton(Globals.lang("Create_entry_based_on_content"));
-        radioButtonMrDlib = new JRadioButton(Globals.lang("Create_entry_based_on_data_fetched_from"));
+        //radioButtonMrDlib = new JRadioButton(Globals.lang("Create_entry_based_on_data_fetched_from"));
         radioButtononlyAttachPDF = new JRadioButton(Globals.lang("Only_attach_PDF"));
-        radioButtonUpdateEmptyFields = new JRadioButton(Globals.lang("Update_empty_fields_with_data_fetched_from"));
-        labelMrDlib1 = new JLabel("Mr._dLib");
-        labelMrDlib1.setFont(new Font(labelMrDlib1.getFont().getName(), Font.BOLD, 13));
-        labelMrDlib1.setForeground(new Color(-16776961));
-        labelMrDlib2 = new JLabel("Mr._dLib");
-        labelMrDlib2.setFont(new Font(labelMrDlib1.getFont().getName(), Font.BOLD, 13));
-        labelMrDlib2.setForeground(new Color(-16776961));
+        //radioButtonUpdateEmptyFields = new JRadioButton(Globals.lang("Update_empty_fields_with_data_fetched_from"));
+        //labelMrDlib1 = new JLabel("Mr._dLib");
+        //labelMrDlib1.setFont(new Font(labelMrDlib1.getFont().getName(), Font.BOLD, 13));
+        //labelMrDlib1.setForeground(new Color(-16776961));
+        //labelMrDlib2 = new JLabel("Mr._dLib");
+        //labelMrDlib2.setFont(new Font(labelMrDlib1.getFont().getName(), Font.BOLD, 13));
+        //labelMrDlib2.setForeground(new Color(-16776961));
         buttonOK = new JButton(Globals.lang("Ok"));
         buttonCancel = new JButton(Globals.lang("Cancel"));
         checkBoxDoNotShowAgain = new JCheckBox(Globals.lang("Do not show this box again for this import"));
@@ -90,12 +90,12 @@
         b.append(radioButtonNoMeta, 3);
         b.append(radioButtonXmp, 3);
         b.append(radioButtonPDFcontent, 3);
-        b.append(radioButtonMrDlib);
-        b.append(labelMrDlib1);
+        //b.append(radioButtonMrDlib);
+        //b.append(labelMrDlib1);
         b.appendSeparator(Globals.lang("Update_Existing_Entry"));
         b.append(radioButtononlyAttachPDF, 3);
-        b.append(radioButtonUpdateEmptyFields);
-        b.append(labelMrDlib2);
+        //b.append(radioButtonUpdateEmptyFields);
+        //b.append(labelMrDlib2);
         b.nextLine();
         b.append(checkBoxDoNotShowAgain);
         b.append(useDefaultPDFImportStyle);
@@ -113,8 +113,8 @@
 
         if (!this.targetIsARow) {
             this.radioButtononlyAttachPDF.setEnabled(false);
-            this.radioButtonUpdateEmptyFields.setEnabled(false);
-            this.labelMrDlib2.setEnabled(false);
+            //this.radioButtonUpdateEmptyFields.setEnabled(false);
+            //this.labelMrDlib2.setEnabled(false);
         }
         this.fileName = fileName;
         String name = new File(this.fileName).getName();
@@ -123,8 +123,8 @@
         } else {
             this.labelFileName.setText(new File(this.fileName).getName().substring(0, 33) + "...");
         }
-        this.labelMrDlib1.addMouseListener(new LabelLinkListener(this.labelMrDlib1, "www.mr-dlib.org/docs/pdf_metadata_extraction.php"));
-        this.labelMrDlib2.addMouseListener(new LabelLinkListener(this.labelMrDlib2, "www.mr-dlib.org/docs/pdf_metadata_extraction.php"));
+        //this.labelMrDlib1.addMouseListener(new LabelLinkListener(this.labelMrDlib1, "www.mr-dlib.org/docs/pdf_metadata_extraction.php"));
+        //this.labelMrDlib2.addMouseListener(new LabelLinkListener(this.labelMrDlib2, "www.mr-dlib.org/docs/pdf_metadata_extraction.php"));
         this.setTitle(LocalizationSupport.message("Import_Metadata_From_PDF"));
 
         setModal(true);
@@ -135,9 +135,9 @@
         bg.add(radioButtonNoMeta);
         bg.add(radioButtonXmp);
         bg.add(radioButtonPDFcontent);
-        bg.add(radioButtonMrDlib);
+        //bg.add(radioButtonMrDlib);
         bg.add(radioButtononlyAttachPDF);
-        bg.add(radioButtonUpdateEmptyFields);
+        //bg.add(radioButtonUpdateEmptyFields);
 
         buttonOK.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent e) {
@@ -174,15 +174,19 @@
 		case CONTENT:
 			radioButtonPDFcontent.setSelected(true);
 			break;
+		/*
 		case MRDLIB:
 			radioButtonMrDlib.setSelected(true);
 			break;
+		*/
 		case ONLYATTACH:
 			radioButtononlyAttachPDF.setSelected(true);
 			break;
+		/*
 		case UPDATEEMPTYFIELDS:
 			radioButtonUpdateEmptyFields.setSelected(true);
 			break;
+		*/
 		default:
 			// fallback
 			radioButtonPDFcontent.setSelected(true);
@@ -217,14 +221,18 @@
     		return XMP;
     	else if (radioButtonPDFcontent.isSelected())
     		return CONTENT;
+    	/*
     	else if (radioButtonMrDlib.isSelected())
     		return MRDLIB;
+    	*/
     	else if (radioButtonNoMeta.isSelected())
     		return NOMETA;
     	else if (radioButtononlyAttachPDF.isSelected())
     		return ONLYATTACH;
+    	/*
     	else if (radioButtonUpdateEmptyFields.isSelected())
     		return UPDATEEMPTYFIELDS;
+    	*/
     	else throw new IllegalStateException();
     }
 
--- jabref-2.10/src/java/spl/PdfImporter.java.remove_mrDlib
+++ jabref-2.10/src/java/spl/PdfImporter.java
@@ -19,11 +19,11 @@
 import net.sf.jabref.undo.UndoableInsertEntry;
 import net.sf.jabref.util.XMPUtil;
 
-import org.sciplore.beans.Document;
+//import org.sciplore.beans.Document;
 
 import spl.filter.PdfFileFilter;
 import spl.gui.ImportDialog;
-import spl.gui.MetaDataListDialog;
+//import spl.gui.MetaDataListDialog;
 
 
 /**
@@ -129,7 +129,7 @@
             	BibtexEntryType type;
                 InputStream in = null;
                 List<BibtexEntry> localRes = null;
-            	MetaDataListDialog metaDataListDialog;
+            	//MetaDataListDialog metaDataListDialog;
                 switch (choice) {
     			case ImportDialog.XMP:
                     //SplDatabaseChangeListener dataListener = new SplDatabaseChangeListener(frame, panel, entryTable, fileName);
@@ -222,84 +222,10 @@
                     }
                     res.add(entry);
                     break;
-    			case ImportDialog.MRDLIB:
-                    metaDataListDialog = new MetaDataListDialog(fileName, true);
-                    Tools.centerRelativeToWindow(metaDataListDialog, frame);
-                    metaDataListDialog.showDialog();
-                    Document document = metaDataListDialog.getXmlDocuments();
-                    entry = null; // to satisfy the Java compiler
-                    if(document != null /*&& documents.getDocuments() != null && documents.getDocuments().size() > 0*/ && metaDataListDialog.getResult() == JOptionPane.OK_OPTION){
-                        int selected = metaDataListDialog.getTableMetadata().getSelectedRow();
-                        if(selected > -1 /*&& selected < documents.getDocuments().size()*/){
-                            //Document document = documents/*.getDocuments().get(selected)*/;
-                            String id = Util.createNeutralId();
-                            entry = new BibtexEntry(id);
-                            if(fieldExists(document.getType())){
-                                type = BibtexEntryType.getStandardType(document.getType());
-                                if(type == null){
-                                    type = BibtexEntryType.ARTICLE;
-                                }
-                                entry.setType(type);
-                            }
-                            else{
-                                entry.setType(BibtexEntryType.ARTICLE);
-                            }
-                            ArrayList<BibtexEntry> list = new ArrayList<BibtexEntry>();
-                            list.add(entry);
-                            Util.setAutomaticFields(list, true, true, false);
-                            //insertFields(entry.getRequiredFields(), entry, document);
-                            insertFields(BibtexFields.getAllFieldNames(), entry, document);
-                            //insertFields(entry.getOptionalFields(), entry, document);
-                            panel.database().insertEntry(entry);
-                            dfh = new DroppedFileHandler(frame, panel);
-                            dfh.linkPdfToEntry(fileName, entryTable, entry);
-                            LabelPatternUtil.makeLabel(panel.metaData(), panel.database(), entry);
-                        }
-                        else{
-                            entry = createNewBlankEntry(fileName);
-                        }
-                    }
-                    else if(metaDataListDialog.getResult() == JOptionPane.CANCEL_OPTION ){
-                        continue;
-                    }
-                    else if(metaDataListDialog.getResult() == JOptionPane.NO_OPTION ){
-                        entry = createNewBlankEntry(fileName);
-                    }
-                    else if(document == null /*|| document.getDocuments() == null || document.getDocuments().size() <= 0*/ && metaDataListDialog.getResult() == JOptionPane.OK_OPTION){
-                        entry = createNewBlankEntry(fileName);
-                    }
-                    assert(entry != null);
-                    res.add(entry);
-                    break;
     			case ImportDialog.NOMETA:
                     entry = createNewBlankEntry(fileName);
                     res.add(entry);
                     break;
-    			case ImportDialog.UPDATEEMPTYFIELDS:
-                    metaDataListDialog = new MetaDataListDialog(fileName, false);                   
-                    Tools.centerRelativeToWindow(metaDataListDialog, frame);
-                    metaDataListDialog.showDialog();
-                    document = metaDataListDialog.getXmlDocuments();
-                    if(document != null /*&& document.getDocuments() != null && document.getDocuments().size() > 0*/ && metaDataListDialog.getResult() == JOptionPane.OK_OPTION){
-                        int selected = metaDataListDialog.getTableMetadata().getSelectedRow();
-                        if(selected > -1 /*&& selected < document.getDocuments().size()*/){
-                            //XmlDocument document = documents.getDocuments().get(selected);
-                            entry = entryTable.getEntryAt(dropRow);
-                            if(fieldExists(document.getType())){
-                                type = BibtexEntryType.getStandardType(document.getType());
-                                if(type != null){
-                                    entry.setType(type);
-                                }
-                            }
-                            //insertFields(entry.getRequiredFields(), entry, document);
-                            insertFields(BibtexFields.getAllFieldNames(), entry, document);
-                            //insertFields(entry.getOptionalFields(), entry, document);
-
-                            dfh = new DroppedFileHandler(frame, panel);
-                            dfh.linkPdfToEntry(fileName, entryTable, dropRow);
-                        }
-                    }
-                    break;
     			case ImportDialog.ONLYATTACH:
                     dfh = new DroppedFileHandler(frame, panel);
                     dfh.linkPdfToEntry(fileName, entryTable, dropRow);
@@ -322,58 +248,6 @@
         return newEntry;
     }
 
-    private void insertFields(String[] fields, BibtexEntry entry, Document xmlDocument) {
-        DocumentWrapper document = new DocumentWrapper(xmlDocument);
-        for(String field : fields){
-            if(entry.getField(field) != null){
-                continue;
-            }
-            if(field.equalsIgnoreCase("author")){
-                entry.setField(field, document.getAuthors("and"));
-            }
-            if(field.equalsIgnoreCase("title")){
-                entry.setField(field, document.getTitle());
-            }
-            if(field.equalsIgnoreCase("abstract")){
-                entry.setField(field, document.getAbstract());
-            }
-            /*if(field.equalsIgnoreCase("keywords")){
-                entry.setField(field, document.getKeyWords());
-            }*/
-            if(field.equalsIgnoreCase("doi")){
-                entry.setField(field, document.getDoi());
-            }
-            /*if(field.equalsIgnoreCase("pages")){
-                entry.setField(field, document.getPages());
-            }
-            if(field.equalsIgnoreCase("volume")){
-                entry.setField(field, document.getVolume());
-            }
-            if(field.equalsIgnoreCase("number")){
-                entry.setField(field, document.getNumber());
-            }*/
-            if(field.equalsIgnoreCase("year")){
-                entry.setField(field, document.getYear());
-            }
-            /*if(field.equalsIgnoreCase("month")){
-                entry.setField(field, document.getMonth());
-            }
-            if(field.equalsIgnoreCase("day")){
-                entry.setField(field, document.getDay());
-            }
-            if(field.equalsIgnoreCase("booktitle")){
-                entry.setField(field, document.getVenue());
-            }
-            if(field.equalsIgnoreCase("journal")){
-                entry.setField(field, document.getVenue());
-            }*/
-        }
-    }
-
-    private boolean fieldExists(String string) {
-        return string != null && !string.isEmpty();
-    }
-
     private BibtexEntry createNewEntry() {
 
         // Find out what type is wanted.
--- jabref-2.10/src/java/net/sf/jabref/ImportSettingsTab.java.remove_mrDlib
+++ jabref-2.10/src/java/net/sf/jabref/ImportSettingsTab.java
@@ -44,10 +44,10 @@
 	
     private JRadioButton radioButtonXmp;
 	private JRadioButton radioButtonPDFcontent;
-    private JRadioButton radioButtonMrDlib;
+    //private JRadioButton radioButtonMrDlib;
     private JRadioButton radioButtonNoMeta;
 	private JRadioButton radioButtononlyAttachPDF;
-	private JRadioButton radioButtonUpdateEmptyFields;
+	//private JRadioButton radioButtonUpdateEmptyFields;
 	private JCheckBox useDefaultPDFImportStyle;
 	
 	private JTextField fileNamePattern;
@@ -59,17 +59,17 @@
         radioButtonNoMeta = new JRadioButton(Globals.lang("Create_blank_entry_linking_the_PDF"));
         radioButtonXmp = new JRadioButton(Globals.lang("Create_entry_based_on_XMP_data"));
         radioButtonPDFcontent = new JRadioButton(Globals.lang("Create_entry_based_on_content"));
-        radioButtonMrDlib = new JRadioButton(Globals.lang("Create_entry_based_on_data_fetched_from")+" Mr.DLib");
+        //radioButtonMrDlib = new JRadioButton(Globals.lang("Create_entry_based_on_data_fetched_from")+" Mr.DLib");
         radioButtononlyAttachPDF = new JRadioButton(Globals.lang("Only_attach_PDF"));
-        radioButtonUpdateEmptyFields = new JRadioButton(Globals.lang("Update_empty_fields_with_data_fetched_from")
-            +" Mr.DLib");
+        //radioButtonUpdateEmptyFields = new JRadioButton(Globals.lang("Update_empty_fields_with_data_fetched_from")
+        //    +" Mr.DLib");
         ButtonGroup bg = new ButtonGroup();
         bg.add(radioButtonNoMeta);
         bg.add(radioButtonXmp);
         bg.add(radioButtonPDFcontent);
-        bg.add(radioButtonMrDlib);
+        //bg.add(radioButtonMrDlib);
         bg.add(radioButtononlyAttachPDF);
-        bg.add(radioButtonUpdateEmptyFields);
+        //bg.add(radioButtonUpdateEmptyFields);
 
         useDefaultPDFImportStyle = new JCheckBox(Globals.lang("Always use this PDF import style (and do not ask for each import)"));
 		
@@ -96,15 +96,15 @@
 		builder.append(radioButtonPDFcontent);
         builder.nextLine();
         builder.append(pan);
-		builder.append(radioButtonMrDlib);
-        builder.nextLine();
-        builder.append(pan);
+		//builder.append(radioButtonMrDlib);
+        //builder.nextLine();
+        //builder.append(pan);
 		builder.append(radioButtononlyAttachPDF);
         builder.nextLine();
         builder.append(pan);
-		builder.append(radioButtonUpdateEmptyFields);
-        builder.nextLine();
-        builder.append(pan);
+		//builder.append(radioButtonUpdateEmptyFields);
+        //builder.nextLine();
+        //builder.append(pan);
 		builder.append(useDefaultPDFImportStyle);
         builder.nextLine();
 		
@@ -136,15 +136,15 @@
 		case ImportDialog.CONTENT:
 			radioButtonPDFcontent.setSelected(true);
 			break;
-		case ImportDialog.MRDLIB:
-			radioButtonMrDlib.setSelected(true);
-			break;
+		//case ImportDialog.MRDLIB:
+		//	radioButtonMrDlib.setSelected(true);
+		//	break;
 		case ImportDialog.ONLYATTACH:
 			radioButtononlyAttachPDF.setSelected(true);
 			break;
-		case ImportDialog.UPDATEEMPTYFIELDS:
-			radioButtonUpdateEmptyFields.setSelected(true);
-			break;
+		//case ImportDialog.UPDATEEMPTYFIELDS:
+		//	radioButtonUpdateEmptyFields.setSelected(true);
+		//	break;
 		default:
 			// fallback
 			radioButtonPDFcontent.setSelected(true);
@@ -162,12 +162,14 @@
 			style = ImportDialog.XMP;
 		else if (radioButtonPDFcontent.isSelected())
 			style = ImportDialog.CONTENT;
-		else if (radioButtonMrDlib.isSelected())
-			style = ImportDialog.MRDLIB;
+		//else if (radioButtonMrDlib.isSelected())
+		//	style = ImportDialog.MRDLIB;
 		else if (radioButtononlyAttachPDF.isSelected())
 			style = ImportDialog.ONLYATTACH;
-		else if (radioButtonUpdateEmptyFields.isSelected())
-			style = ImportDialog.UPDATEEMPTYFIELDS;
+		//else if (radioButtonUpdateEmptyFields.isSelected())
+		//	style = ImportDialog.UPDATEEMPTYFIELDS;
+		else
+			throw new IllegalStateException();
 		Globals.prefs.putInt(PREF_IMPORT_DEFAULT_PDF_IMPORT_STYLE, style);
 		Globals.prefs.put(PREF_IMPORT_FILENAMEPATTERN, fileNamePattern.getText());
 	}
